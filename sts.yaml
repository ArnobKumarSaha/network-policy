apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: frontend
spec:
  serviceName: "frontend"
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      initContainers:
      - name: init-www
        image: busybox
        command: ['sh', '-c', 'echo "<html><body><h1>Welcome to the fontend</h1></body></html>" > /usr/share/nginx/html/index.html']
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.21
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---




apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: backend
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: backend
spec:
  serviceName: "backend"
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
      - name: init-www
        image: busybox
        command: ['sh', '-c', 'echo "<html><body><h1>Welcome to the backend</h1></body></html>" > /usr/share/nginx/html/index.html']
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.21
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---


# apt update && apt install dnsutils -y && apt install curl -y
# nslookup backend.default.svc
# curl backend.default.svc:80


---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-some
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: backend
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
      podSelector:
        matchLabels:
          app: frontend
  policyTypes:
  - Ingress